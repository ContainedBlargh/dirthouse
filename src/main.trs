use actix_web::*;
use handlebars::Handlebars;
use actix_web::middleware::Logger;
use actix_files::NamedFile;
use std::path::{Path, PathBuf};

pub struct AppState {
    handlebars: Handlebars<'static>,
}

#[get("/echo")]
async fn echo(req_body: String) -> impl Responder {
    HttpResponse::Ok().body(req_body)
}

macro_rules! handlebars_response {
    ($handlebars:expr, $template:expr, $data:expr) => {
        $handlebars.render($template, &$data)
            .map_err(|e| {
                eprintln!("Handlebars rendering error: {}", e);
                HttpResponse::InternalServerError().finish()
            })
            .map(|content| HttpResponse::Ok()
                .content_type(actix_web::http::header::ContentType::html())
                .body(content))
            .unwrap_or_else(|response| response)
    };
}

{{#each modules}}
    {{#if this.has_template_fn}}
#[get("{{route}}")]
pub async fn {{name}}_template(req: HttpRequest, state: web::Data<AppState>) -> impl Responder {
    let handlebars = &state.handlebars;
    let data = {{name}}::template(req).await;
    handlebars_response!(handlebars, "{{name}}", data)
}
    {{/if}}
{{/each}}

async fn serve_file(req: HttpRequest) -> Result<NamedFile> {
    let path: PathBuf = req.match_info().query("filename").parse().unwrap();
    let serve_path = Path::new("{{config.serve_dir}}");
    let path = serve_path.join(path);
    if let Some(extension) = path.extension() {
        if extension.eq_ignore_ascii_case("rsr") {
            panic!("Not found!");
        } else {
            return Ok(NamedFile::open(path)?);
        }
    }
    Ok(NamedFile::open(path)?)
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    let mut handlebars = Handlebars::new();
    println!("Launching application http://{{config.host_addr}}:{{config.port}}");
    {{#each modules}}
    println!("│");
    {{#if this.has_template_fn}}
    println!("├─►[GET]: {{route}}");
    handlebars
        .register_template_string(
            "{{name}}",
            include_str!("{{name}}.html.hbs")
        )
        .expect("Could not register template {{name}}!");
    {{else}}
    println!("├─►{{route}}");
    {{/if}}
        {{#each this.services}}
    println!("┼──►[{{method}}]: {{route}} {{name}}");
        {{/each}}
    {{/each}}
    println!("Also statically serving files from '{{config.serve_dir}}'");
    let handlebars = handlebars;
    HttpServer::new(move || {
        App::new()
            .app_data(web::Data::new(AppState { handlebars: handlebars.clone() }))
            .service(echo)
    {{#each modules}}
        {{#if has_template_fn}}
            .service({{name}}_template)
        {{/if}}
        {{#each this.services}}
            .service({{../name}}::{{name}})
        {{/each}}
    {{/each}}
            .route("/{filename:.*}", web::get().to(serve_file))
            .wrap(Logger::default())
    })
        .bind(("{{config.host_addr}}", {{config.port}}))?
        .run()
        .await
}
